# coding=utf-8

# preOrder
# 10 8 7 6 5
# midOrder
# 5 6 7 8 10
# after balanced
# preOrder
# 8 6 5 7 10
# midOrder
# 5 6 7 8 10
# 3
# --------------------
# preOrder
# 802 765 1 521 220 184 104 36 159 198 380 378 241 294 369 387 418 516 729 641 582 583 623 724 653 692 703 992 969 887 909
#  901 971
# midOrder
# 1 36 104 159 184 198 220 241 294 369 378 380 387 418 516 521 582 583 623 641 653 692 703 724 729 765 802 887 901 909 969
#  971 992
# after balanced
# preOrder
# 521 220 1 184 104 36 159 198 380 294 241 378 369 418 387 516 802 765 692 641 583 582 623 653 729 724 703 969 901 887 909
#  992 971
# midOrder
# 1 36 104 159 184 198 220 241 294 369 378 380 387 418 516 521 582 583 623 641 653 692 703 724 729 765 802 887 901 909 969
#  971 992
# 7


def tree_dot(pre, mid, parent = None):
    # print(len(pre))
    # print(len(mid))
    assert len(pre) == len(mid)

    if len(pre) < 1:
        return
    root = pre[0]
    # print("root = ", root)
    if parent:
        print(parent, "->", root, ";")



    pos = mid.index(root)
    # print("pos = ", pos)

    tree_dot(pre[1:pos+1], mid[0:pos], root)

    tree_dot(pre[pos+1:], mid[pos+1:], root)

if __name__ == "__main__":
    pre = [10, 8,7,6,5]
    mid = [5,6,7,8,10]
    # tree_dot(pre, mid)
# 521 220 1 184 104 36 159 198 380 294 241 378 369 418 387 516 802 765 692 641 583 582 623 653 729 724 703 969 901 887 909 992 971
    pre2 = [521,220,1,184,104,36,159,198,380,294,241,378,369,418,387,516,802,765,692,641,583,582,623,653,729,724,703,969,901,887,909,992,971]
# midOrder
# 1 36 104 159 184 198 220 241 294 369 378 380 387 418 516 521 582 583 623 641 653 692 703 724 729 765 802 887 901 909 969 971 992
    mid2 = [1,36,104,159,184,198,220,241,294,369,378,380,387,418,516,521,582,583,623,641,653,692,703,724,729,765,802,887,901,909,969,971,992]
    tree_dot(pre2, mid2)



